if(sensor_type=="pm1.0")
p<- ggplot(out, aes(out$timestamp, out$pm1.0, color='pm1.0') + geom_quantile() #geom_smooth(model=lm) #◙geom_bar(stat="identity")
if(sensor_type=="pm10")
p<- ggplot(out, aes(out$timestamp, out$pm10, color='pm10'))
if(sensor_type=="pm2.5")
p<- ggplot(out, aes(out$timestamp, out$pm2.5, color='pm2.5'))
if(sensor_type=="no2")
p<- ggplot(out, aes(out$timestamp, out$no2, color='no2'))
if(sensor_type=="bc")
p<- ggplot(out, aes(out$timestamp, out$bc, color='bc'))
p + geom_point(color=colorPlot)+ labs(x = "timestamp ", y=sensor_type ,title = "AirParif")
dev.off()
dbDisconnect(con)
library(ggplot2)
library(ggthemes)
start_date<-"2018-03-05 18:10"
end_date<-"2018-03-12 18:10"
sensor_box<-4317218322204134
sensor_type<-"pm1.0"
colorPlot<-"red"
.libPaths('C:/Users/florian.marques/Documents/R/win-library/3.5')#to indicate the path to the libraries when run the script through php
require('RPostgreSQL')
require('ggplot2')
con=dbConnect(PostgreSQL(),
user="postgres",dbname="polluscope",password="12345678")
sqlStatement <- paste0("select * from flaten_all_data where node_id='", sensor_box ,"' and timestamp between '", start_date ,"' and '", end_date ,"'  ")
out=dbGetQuery(con, sqlStatement)
write.csv(out, file = "MyData.csv",row.names = FALSE)
png(filename="plottest.png",width=500,height=500)# open or creat the png file
if(sensor_type=="pm1.0")
p<- ggplot(out, aes(out$timestamp, out$pm1.0, color='pm1.0') + geom_quantile() #geom_smooth(model=lm) #◙geom_bar(stat="identity")
if(sensor_type=="pm10")
p<- ggplot(out, aes(out$timestamp, out$pm10, color='pm10'))
if(sensor_type=="pm2.5")
p<- ggplot(out, aes(out$timestamp, out$pm2.5, color='pm2.5'))
if(sensor_type=="no2")
p<- ggplot(out, aes(out$timestamp, out$no2, color='no2'))
if(sensor_type=="bc")
p<- ggplot(out, aes(out$timestamp, out$bc, color='bc'))
p + geom_point(color=colorPlot)+ labs(x = "timestamp ", y=sensor_type ,title = "AirParif")
dev.off()
dbDisconnect(con)
library(ggplot2)
library(ggthemes)
start_date<-"2018-03-05 18:10"
end_date<-"2018-03-08 18:10"
sensor_box<-4317218322204134
sensor_type<-"pm1.0"
colorPlot<-"red"
.libPaths('C:/Users/florian.marques/Documents/R/win-library/3.5')#to indicate the path to the libraries when run the script through php
require('RPostgreSQL')
require('ggplot2')
con=dbConnect(PostgreSQL(),
user="postgres",dbname="polluscope",password="12345678")
sqlStatement <- paste0("select * from flaten_all_data where node_id='", sensor_box ,"' and timestamp between '", start_date ,"' and '", end_date ,"'  ")
out=dbGetQuery(con, sqlStatement)
write.csv(out, file = "MyData.csv",row.names = FALSE)
png(filename="plottest.png",width=500,height=500)# open or creat the png file
if(sensor_type=="pm1.0")
p<- ggplot(out, aes(out$timestamp, out$pm1.0, color='pm1.0') + geom_quantile() #geom_smooth(model=lm) #◙geom_bar(stat="identity")
if(sensor_type=="pm10")
p<- ggplot(out, aes(out$timestamp, out$pm10, color='pm10'))
if(sensor_type=="pm2.5")
p<- ggplot(out, aes(out$timestamp, out$pm2.5, color='pm2.5'))
if(sensor_type=="no2")
p<- ggplot(out, aes(out$timestamp, out$no2, color='no2'))
if(sensor_type=="bc")
p<- ggplot(out, aes(out$timestamp, out$bc, color='bc'))
p + geom_point(color=colorPlot)+ labs(x = "timestamp ", y=sensor_type ,title = "AirParif")
dev.off()
dbDisconnect(con)
library(ggplot2)
library(ggthemes)
start_date<-"2018-03-05 18:10"
end_date<-"2018-03-08 18:10"
sensor_box<-4317218322204134
sensor_type<-"pm1.0"
colorPlot<-"red"
.libPaths('C:/Users/florian.marques/Documents/R/win-library/3.5')#to indicate the path to the libraries when run the script through php
require('RPostgreSQL')
require('ggplot2')
con=dbConnect(PostgreSQL(),
user="postgres",dbname="polluscope",password="12345678")
sqlStatement <- paste0("select * from flaten_all_data where node_id='", sensor_box ,"' and timestamp between '", start_date ,"' and '", end_date ,"'  ")
out=dbGetQuery(con, sqlStatement)
write.csv(out, file = "MyData.csv",row.names = FALSE)
png(filename="plottest.png",width=500,height=500)# open or creat the png file
if(sensor_type=="pm1.0")
p<- ggplot(out, aes(out$timestamp, out$pm1.0, color='pm1.0') + geom_bar(stat="identity") #geom_smooth(model=lm) #geom_quantile()
if(sensor_type=="pm10")
p<- ggplot(out, aes(out$timestamp, out$pm10, color='pm10'))
if(sensor_type=="pm2.5")
p<- ggplot(out, aes(out$timestamp, out$pm2.5, color='pm2.5'))
if(sensor_type=="no2")
p<- ggplot(out, aes(out$timestamp, out$no2, color='no2'))
if(sensor_type=="bc")
p<- ggplot(out, aes(out$timestamp, out$bc, color='bc'))
p + geom_point(color=colorPlot)+ labs(x = "timestamp ", y=sensor_type ,title = "AirParif")
dev.off()
dbDisconnect(con)
library(ggplot2)
library(ggthemes)
start_date<-"2017-02-05 18:10"
end_date<-"2018-03-08 18:10"
sensor_box<-4317218322204134
sensor_type<-"pm1.0"
colorPlot<-"red"
.libPaths('C:/Users/florian.marques/Documents/R/win-library/3.5')#to indicate the path to the libraries when run the script through php
require('RPostgreSQL')
require('ggplot2')
con=dbConnect(PostgreSQL(),
user="postgres",dbname="polluscope",password="12345678")
sqlStatement <- paste0("select * from flaten_all_data where node_id='", sensor_box ,"' and timestamp between '", start_date ,"' and '", end_date ,"'  ")
out=dbGetQuery(con, sqlStatement)
write.csv(out, file = "MyData.csv",row.names = FALSE)
png(filename="plottest.png",width=500,height=500)# open or creat the png file
if(sensor_type=="pm1.0")
p<- ggplot(out, aes(out$timestamp, out$pm1.0, color='pm1.0') + geom_bar(stat="identity") #geom_smooth(model=lm) #geom_quantile()
if(sensor_type=="pm10")
p<- ggplot(out, aes(out$timestamp, out$pm10, color='pm10'))
if(sensor_type=="pm2.5")
p<- ggplot(out, aes(out$timestamp, out$pm2.5, color='pm2.5'))
if(sensor_type=="no2")
p<- ggplot(out, aes(out$timestamp, out$no2, color='no2'))
if(sensor_type=="bc")
p<- ggplot(out, aes(out$timestamp, out$bc, color='bc'))
p + geom_point(color=colorPlot)+ labs(x = "timestamp ", y=sensor_type ,title = "AirParif")
dev.off()
dbDisconnect(con)
library(ggplot2)
library(ggthemes)
start_date<-"2087-03-05 18:10"
end_date<-"2018-03-08 18:10"
sensor_box<-4317218322204134
sensor_type<-"pm1.0"
colorPlot<-"red"
.libPaths('C:/Users/florian.marques/Documents/R/win-library/3.5')#to indicate the path to the libraries when run the script through php
require('RPostgreSQL')
require('ggplot2')
con=dbConnect(PostgreSQL(),
user="postgres",dbname="polluscope",password="12345678")
sqlStatement <- paste0("select * from flaten_all_data where node_id='", sensor_box ,"' and timestamp between '", start_date ,"' and '", end_date ,"'  ")
out=dbGetQuery(con, sqlStatement)
write.csv(out, file = "MyData.csv",row.names = FALSE)
png(filename="plottest.png",width=500,height=500)# open or creat the png file
if(sensor_type=="pm1.0")
p<- ggplot(out, aes(out$timestamp, out$pm1.0, color='pm1.0')) + geom_bar(stat="identity") #geom_smooth(model=lm) #geom_quantile()
if(sensor_type=="pm10")
p<- ggplot(out, aes(out$timestamp, out$pm10, color='pm10'))
if(sensor_type=="pm2.5")
p<- ggplot(out, aes(out$timestamp, out$pm2.5, color='pm2.5'))
if(sensor_type=="no2")
p<- ggplot(out, aes(out$timestamp, out$no2, color='no2'))
if(sensor_type=="bc")
p<- ggplot(out, aes(out$timestamp, out$bc, color='bc'))
p + geom_point(color=colorPlot)+ labs(x = "timestamp ", y=sensor_type ,title = "AirParif")
dev.off()
dbDisconnect(con)
library(ggplot2)
library(ggthemes)
start_date<-"2018-03-05 18:10"
end_date<-"2018-03-08 18:10"
sensor_box<-4317218322204134
sensor_type<-"pm1.0"
colorPlot<-"red"
.libPaths('C:/Users/florian.marques/Documents/R/win-library/3.5')#to indicate the path to the libraries when run the script through php
require('RPostgreSQL')
require('ggplot2')
con=dbConnect(PostgreSQL(),
user="postgres",dbname="polluscope",password="12345678")
sqlStatement <- paste0("select * from flaten_all_data where node_id='", sensor_box ,"' and timestamp between '", start_date ,"' and '", end_date ,"'  ")
out=dbGetQuery(con, sqlStatement)
write.csv(out, file = "MyData.csv",row.names = FALSE)
png(filename="plottest.png",width=500,height=500)# open or creat the png file
if(sensor_type=="pm1.0")
p<- ggplot(out, aes(out$timestamp, out$pm1.0, color='pm1.0')) + geom_bar(stat="identity") #geom_smooth(model=lm) #geom_quantile()
if(sensor_type=="pm10")
p<- ggplot(out, aes(out$timestamp, out$pm10, color='pm10'))
if(sensor_type=="pm2.5")
p<- ggplot(out, aes(out$timestamp, out$pm2.5, color='pm2.5'))
if(sensor_type=="no2")
p<- ggplot(out, aes(out$timestamp, out$no2, color='no2'))
if(sensor_type=="bc")
p<- ggplot(out, aes(out$timestamp, out$bc, color='bc'))
p + geom_point(color=colorPlot)+ labs(x = "timestamp ", y=sensor_type ,title = "AirParif")
dev.off()
dbDisconnect(con)
library(ggplot2)
library(ggthemes)
start_date<-"2018-03-05 18:10"
end_date<-"2018-03-08 18:10"
sensor_box<-4317218322204134
sensor_type<-"pm1.0"
colorPlot<-"red"
.libPaths('C:/Users/florian.marques/Documents/R/win-library/3.5')#to indicate the path to the libraries when run the script through php
require('RPostgreSQL')
require('ggplot2')
con=dbConnect(PostgreSQL(),
user="postgres",dbname="polluscope",password="12345678")
sqlStatement <- paste0("select * from flaten_all_data where node_id='", sensor_box ,"' and timestamp between '", start_date ,"' and '", end_date ,"'  ")
out=dbGetQuery(con, sqlStatement)
write.csv(out, file = "MyData.csv",row.names = FALSE)
png(filename="plottest.png",width=500,height=500)# open or creat the png file
if(sensor_type=="pm1.0")
p<- ggplot(out, aes(out$timestamp, out$pm1.0, color='pm1.0')) + geom_smooth(model=lm) #geom_quantile() #geom_bar(stat="identity")
if(sensor_type=="pm10")
p<- ggplot(out, aes(out$timestamp, out$pm10, color='pm10'))
if(sensor_type=="pm2.5")
p<- ggplot(out, aes(out$timestamp, out$pm2.5, color='pm2.5'))
if(sensor_type=="no2")
p<- ggplot(out, aes(out$timestamp, out$no2, color='no2'))
if(sensor_type=="bc")
p<- ggplot(out, aes(out$timestamp, out$bc, color='bc'))
p + geom_point(color=colorPlot)+ labs(x = "timestamp ", y=sensor_type ,title = "AirParif")
dev.off()
dbDisconnect(con)
library(ggplot2)
library(ggthemes)
start_date<-"2018-03-05 18:10"
end_date<-"2018-03-08 18:10"
sensor_box<-4317218322204134
sensor_type<-"pm1.0"
colorPlot<-"red"
.libPaths('C:/Users/florian.marques/Documents/R/win-library/3.5')#to indicate the path to the libraries when run the script through php
require('RPostgreSQL')
require('ggplot2')
con=dbConnect(PostgreSQL(),
user="postgres",dbname="polluscope",password="12345678")
sqlStatement <- paste0("select * from flaten_all_data where node_id='", sensor_box ,"' and timestamp between '", start_date ,"' and '", end_date ,"'  ")
out=dbGetQuery(con, sqlStatement)
write.csv(out, file = "MyData.csv",row.names = FALSE)
png(filename="plottest.png",width=500,height=500)# open or creat the png file
if(sensor_type=="pm1.0")
p<- ggplot(out, aes(out$timestamp, out$pm1.0, color='pm1.0')) + geom_smooth(model=lm) #geom_quantile() #geom_bar(stat="identity")
if(sensor_type=="pm10")
p<- ggplot(out, aes(out$timestamp, out$pm10, color='pm10'))
if(sensor_type=="pm2.5")
p<- ggplot(out, aes(out$timestamp, out$pm2.5, color='pm2.5'))
if(sensor_type=="no2")
p<- ggplot(out, aes(out$timestamp, out$no2, color='no2'))
if(sensor_type=="bc")
p<- ggplot(out, aes(out$timestamp, out$bc, color='bc'))
p + geom_point(color=colorPlot)+ labs(x = "timestamp ", y=sensor_type ,title = "AirParif")
dev.off()
dbDisconnect(con)
library(ggplot2)
library(ggthemes)
start_date<-"2018-03-05 18:10"
end_date<-"2018-03-08 18:10"
sensor_box<-4317218322204134
sensor_type<-"pm1.0"
colorPlot<-"red"
.libPaths('C:/Users/florian.marques/Documents/R/win-library/3.5')#to indicate the path to the libraries when run the script through php
require('RPostgreSQL')
require('ggplot2')
con=dbConnect(PostgreSQL(),
user="postgres",dbname="polluscope",password="12345678")
sqlStatement <- paste0("select * from flaten_all_data where node_id='", sensor_box ,"' and timestamp between '", start_date ,"' and '", end_date ,"'  ")
out=dbGetQuery(con, sqlStatement)
write.csv(out, file = "MyData.csv",row.names = FALSE)
png(filename="plottest2.png",width=500,height=500)# open or creat the png file
p<- ggplot(out, aes(out$timestamp, out$sensor_type, color=sensor_type))
p + geom_point(color=colorPlot)+ labs(x = "timestamp ", y=sensor_type ,title = "AirParif")
dev.off()
png(filename="plottest.png",width=500,height=500)# open or creat the png file
if(sensor_type=="pm1.0")
p<- ggplot(out, aes(out$timestamp, out$pm1.0, color='pm1.0')) + geom_smooth(model=lm) #geom_quantile() #geom_bar(stat="identity")
if(sensor_type=="pm10")
p<- ggplot(out, aes(out$timestamp, out$pm10, color='pm10'))
if(sensor_type=="pm2.5")
p<- ggplot(out, aes(out$timestamp, out$pm2.5, color='pm2.5'))
if(sensor_type=="no2")
p<- ggplot(out, aes(out$timestamp, out$no2, color='no2'))
if(sensor_type=="bc")
p<- ggplot(out, aes(out$timestamp, out$bc, color='bc'))
p + geom_point(color=colorPlot)+ labs(x = "timestamp ", y=sensor_type ,title = "AirParif")
dev.off()
dbDisconnect(con)
library(ggplot2)
library(ggthemes)
start_date<-"2018-03-05 18:10"
end_date<-"2018-03-08 18:10"
sensor_box<-4317218322204134
sensor_type<-"pm1.0"
colorPlot<-"red"
.libPaths('C:/Users/florian.marques/Documents/R/win-library/3.5')#to indicate the path to the libraries when run the script through php
require('RPostgreSQL')
require('ggplot2')
con=dbConnect(PostgreSQL(),
user="postgres",dbname="polluscope",password="12345678")
sqlStatement <- paste0("select * from flaten_all_data where node_id='", sensor_box ,"' and timestamp between '", start_date ,"' and '", end_date ,"'  ")
out=dbGetQuery(con, sqlStatement)
write.csv(out, file = "MyData.csv",row.names = FALSE)
png(filename="plottest.png",width=500,height=500)# open or creat the png file
if(sensor_type=="pm1.0")
p<- ggplot(out, aes(out$timestamp, out$pm1.0, color='pm1.0')) #+ geom_smooth(model=lm) #geom_quantile() #geom_bar(stat="identity")
if(sensor_type=="pm10")
p<- ggplot(out, aes(out$timestamp, out$pm10, color='pm10'))
if(sensor_type=="pm2.5")
p<- ggplot(out, aes(out$timestamp, out$pm2.5, color='pm2.5'))
if(sensor_type=="no2")
p<- ggplot(out, aes(out$timestamp, out$no2, color='no2'))
if(sensor_type=="bc")
p<- ggplot(out, aes(out$timestamp, out$bc, color='bc'))
p + geom_bar(stat="identity")
p + geom_point(color=colorPlot)+ labs(x = "timestamp ", y=sensor_type ,title = "AirParif")
dev.off()
dbDisconnect(con)
library(ggplot2)
library(ggthemes)
start_date<-"2018-03-05 18:10"
end_date<-"2018-03-08 18:10"
sensor_box<-4317218322204134
sensor_type<-"pm1.0"
colorPlot<-"red"
.libPaths('C:/Users/florian.marques/Documents/R/win-library/3.5')#to indicate the path to the libraries when run the script through php
require('RPostgreSQL')
require('ggplot2')
con=dbConnect(PostgreSQL(),
user="postgres",dbname="polluscope",password="12345678")
sqlStatement <- paste0("select * from flaten_all_data where node_id='", sensor_box ,"' and timestamp between '", start_date ,"' and '", end_date ,"'  ")
out=dbGetQuery(con, sqlStatement)
write.csv(out, file = "MyData.csv",row.names = FALSE)
png(filename="plottest.png",width=500,height=500)# open or creat the png file
if(sensor_type=="pm1.0")
p<- ggplot(out, aes(out$timestamp, out$pm1.0, color='pm1.0')) + geom_bar(stat="identity") #+ geom_smooth(model=lm) #geom_quantile() #geom_bar(stat="identity")
if(sensor_type=="pm10")
p<- ggplot(out, aes(out$timestamp, out$pm10, color='pm10'))
if(sensor_type=="pm2.5")
p<- ggplot(out, aes(out$timestamp, out$pm2.5, color='pm2.5'))
if(sensor_type=="no2")
p<- ggplot(out, aes(out$timestamp, out$no2, color='no2'))
if(sensor_type=="bc")
p<- ggplot(out, aes(out$timestamp, out$bc, color='bc'))
p + geom_point(color=colorPlot)+ labs(x = "timestamp ", y=sensor_type ,title = "AirParif")
dev.off()
dbDisconnect(con)
library(leaflet)
villes <- data.frame(time = out$timestamp,
Latitude = out$gps_lat,
Longitude = out$gps_lng,
id_capteur = out$node_id)
m <- leaflet(villes) %>% addTiles() %>%
addCircles(lng = ~Longitude, lat = ~Latitude, weight = 1,
radius = 50, popup = ~paste(time, ":", id_capteur),
color = "#a500a5", fillOpacity = 0.5)
m <- addPolylines(m, data = villes,lat = ~out$gps_lat, lng = ~out$gps_lng)
library(htmlwidgets)
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m
library(leaflet)
m <- leaflet() %>% addTiles() %>%
library(htmlwidgets)
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m
library(leaflet)
m <- leaflet() %>% addTiles() %>%
m
library(htmlwidgets)
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m
.libPaths('C:/Users/flori/Documents/R/win-library/3.6')
library(leaflet)
m <- leaflet() %>% addTiles() %>%
library(htmlwidgets)
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m
.libPaths('C:/Users/flori/Documents/R/win-library/3.6')
library(leaflet)
m <- leaflet() %>% addTiles() %>%
m
library(htmlwidgets)
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m
.libPaths('C:/Users/flori/Documents/R/win-library/3.6')
library(leaflet)
m <- leaflet() %>%
m
library(htmlwidgets)
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m
.libPaths('C:/Users/flori/Documents/R/win-library/3.6')
library(leaflet)
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 10)
m
library(htmlwidgets)
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m
.libPaths('C:/Users/flori/Documents/R/win-library/3.6')
library(leaflet)
library(jsonlite)
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 10)
m
library(htmlwidgets)
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m
install.packages("jsonlite")
.libPaths('C:/Users/flori/Documents/R/win-library/3.6')
library(leaflet)
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 10)
m
library(htmlwidgets)
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 10)
m
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 10)
m
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 10)
m
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 10)
m
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 10)
m
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 10)
m
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
.libPaths('C:/Users/flori/Documents/R/win-library/3.6')
library(leaflet)
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 10)
m
library(htmlwidgets)
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m
install.packages("jsonlite", repos="http://cran.r-project.org")
.libPaths('C:/Users/flori/Documents/R/win-library/3.6')
library(leaflet)
library(jsonlite)
library(httr)
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 10)
m
library(htmlwidgets)
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m
install.packages("jsonlite", repos="http://cran.r-project.org")
.libPaths('C:/Users/flori/Documents/R/win-library/3.6')
library(leaflet)
library(jsonlite)
library(httr)
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 10)
m
library(htmlwidgets)
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m
install.packages(c("htmlwidgets", "jsonlite", "leaflet"))
install.packages(c("htmlwidgets", "jsonlite", "leaflet"))
.libPaths('C:/Users/flori/Documents/R/win-library/3.6')
library(leaflet)
library(jsonlite)
library(httr)
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 10)
m
library(htmlwidgets)
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m
.libPaths('C:/Users/flori/Documents/R/win-library/3.6')
library(leaflet)
library(jsonlite)
library(httr)
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 10)
m
library(htmlwidgets)
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m
install.packages(c("htmlwidgets", "httr", "jsonlite", "leaflet"))
.libPaths('C:/Users/flori/Documents/R/win-library/3.6')
library(leaflet)
library(jsonlite)
library(httr)
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 10)
m
library(htmlwidgets)
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m
#.libPaths('C:/Users/flori/Documents/R/win-library/3.6')
.libPaths('C:/Users/flori/Appdata/Local/Temps\RtmpQ59RVM(çRVM\downloaded_packages')
library(leaflet)
library(jsonlite)
library(httr)
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 10)
m
library(htmlwidgets)
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m
.libPaths('C:/Users/flori/Documents/R/win-library/3.6')
library(leaflet)
m <- leaflet() %>% addTiles() %>%
setView(lng = 2.3272305000000415, lat = 48.8635517, zoom = 10)
library(htmlwidgets)
saveWidget(m, 'map_empty.html', selfcontained = TRUE)
m
